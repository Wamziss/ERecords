File upload
{/* import React, { useState, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import '../styles.css';
import ShareModal from '../subcomponents/ShareModal';
import Sidebar from '../Sidebar';
import { AuthClient } from '@dfinity/auth-client';
import { createActor } from '../../../../declarations/ERecords_backend';
import Modal from 'react-bootstrap/Modal';
import Button from 'react-bootstrap/Button';
import { Actor, HttpAgent } from '@dfinity/agent';
import { idlFactory } from '../../../../declarations/ERecords_backend/ERecords_backend.did.js';

const canisterId = 'mngtr-gaaaa-aaaal-qjqfa-cai';
const agent = new HttpAgent();
const erecords = Actor.createActor(idlFactory, { agent, canisterId });

 function Fileupload() {
    const [files, setFiles] = useState([]); */
    // const [isFocused, setIsFocused] = useState(false);
    // const fileInputRef = useRef(null);
    // const [showShareModal, setShowShareModal] = useState(false);
    // const [showOptionsModal, setShowOptionsModal] = useState(false);
    // const [modalFileIndex, setModalFileIndex] = useState(null);
    // const [sharedFiles, setSharedFiles] = useState([]);
    // const [archivedFiles, setArchivedFiles] = useState([]);
    // const [selectedFile, setSelectedFile] = useState(null);
    // const accessLink = "Accesslink://accesslink"; Placeholder for dynamic generation

    // const handleShareClick = (index) => {
    //     setModalFileIndex(index);
    //     setShowShareModal(true);
    // };
    // const handleShareClick = (index) => {
        
    //     const file = files[index];
    //     const sharedFiles = JSON.parse(localStorage.getItem('sharedFiles')) || [];
    //     sharedFiles.push({
    //         name: file.name,
    //         sharedTime: new Date().toLocaleString(),
    //     });
    //     localStorage.setItem('sharedFiles', JSON.stringify(sharedFiles));
    //     setModalFileIndex(index);
    //     setShowShareModal(true);
        
    // };
    

    // const handleCloseShareModal = () => {
    //     setShowShareModal(false);
    //     setModalFileIndex(null);
    // };

    // const handleOptionsClick = (index) => {
    //     setSelectedFile(index);
    //     setShowOptionsModal(true);
    // };

    // const handleCloseOptionsModal = () => {
    //     setShowOptionsModal(false);
    //     setSelectedFile(null);
    // };

    // const handleShare = () => {
    //     if (selectedFile !== null) {
    //         const fileToShare = files[selectedFile];
    //         setSharedFiles([...sharedFiles, {
    //             name: fileToShare.name,
    //             sharedTime: new Date().toLocaleString(),
    //         }]);
    //         handleCloseShareModal();
    //     }
    // };

    // const handleArchive = () => {
    //     if (selectedFile !== null) {
    //         const fileToArchive = files[selectedFile];
    //         setArchivedFiles([...archivedFiles, {
    //             name: fileToArchive.name,
    //             archivedTime: new Date().toLocaleString(),
    //         }]);
    //         handleCloseOptionsModal();
    //     }
    // };
    // const handleFilesUpload = async (uploadedItems) => {
    //     try {
    //       let newFiles = [];
      
    //       Function to process a single file
    //       const processFile = async (file) => {
    //         return {
    //           name: file.name,
    //           uploadTime: new Date().toLocaleString(),
    //           fileData: file
    //         };
    //       };
      
    //       Function to recursively process folders
    //       const processFolder = async (folder) => {
    //         let folderFiles = [];
    //         for await (const entry of folder) {
    //           if (entry.kind === 'file') {
    //             folderFiles.push(await processFile(entry));
    //           } else if (entry.kind === 'directory') {
    //             folderFiles.push(...await processFolder(entry));
    //           }
    //         }
    //         return folderFiles;
    //       };
      
    //       Process uploaded items (files or folders)
    //       for (const item of uploadedItems) {
    //         if (item.kind === 'file') {
    //           newFiles.push(await processFile(item));
    //         } else if (item.kind === 'directory') {
    //           newFiles.push(...await processFolder(item));
    //         }
    //       }
      
    //       setFiles([...files, ...newFiles]);
      
    //       Create AuthClient and get identity
    //       const authClient = await AuthClient.create();
    //       const identity = authClient.getIdentity();
      
          // Create the actor with the identity
//           const eRecordsActor = createActor(canisterId, {
//             agentOptions: {
//               identity,
//             },
//           });
      
//           // Upload each file to the backend canister
//           for (const file of newFiles) {
//             const arrayBuffer = await file.fileData.arrayBuffer();
//             const fileBlob = new Uint8Array(arrayBuffer);
//             await eRecordsActor.uploadFile(file.name, fileBlob);
//           }
      
//         } catch (error) {
//           console.error('File upload failed:', error);
//         }
//       };

//     const handleFileInputChange = (event) => {
//         handleFilesUpload(event.target.files);
//     };

//     const handleDragOver = (event) => {
//         event.preventDefault();
//     };

//     const handleDrop = (event) => {
//         event.preventDefault();
//         handleFilesUpload(event.dataTransfer.files);
//     };

//     const handleUploadClick = () => {
//         fileInputRef.current.click();
//     };

//     const styles = {
//         mainContainer: {
//             display: 'flex',
//             fontFamily: 'verdana',
//             margin: 0,
//             padding: 0,
//             width: '100%',
//             height: '100vh',
//             overflowY: 'scroll',
//         },
//         searchInput: {
//             paddingRight: '40px',
//             borderRadius: '20px',
//             border: '1px solid gray',
//         },
//         searchInputFocus: {
//             outline: 'none',
//             borderColor: '#6e06b3',
//             boxShadow: '0 0 1px 2px #f5f5f5',
//         },
//         searchIcon: {
//             position: 'absolute',
//             right: '15px',
//             top: '50%',
//             transform: 'translateY(-50%)',
//             color: 'gray',
//         },
//         searchContainer: {
//             position: 'relative',
//             width: '45%',
//             margin: '10px auto',
//         }
//     };

//     return (
//         <div style={styles.mainContainer} className='row'>
//             <Sidebar />
//             <div className='main-contentarea'>
//                 <div style={styles.searchContainer}>
//                     <input
//                         type="text"
//                         className="form-control"
//                         style={isFocused ? { ...styles.searchInput, ...styles.searchInputFocus } : styles.searchInput}
//                         onFocus={() => setIsFocused(true)}
//                         onBlur={() => setIsFocused(false)}
//                         placeholder="Search..."
//                     />
//                     <i className="bi bi-search" style={styles.searchIcon}></i>
//                 </div>
//                 <div className="file-upload-container">
//                     <p className='upload-txt'>Upload Files</p>
//                     <div className='file-upload'>
//                         <div
//                             className="upload-box"
//                             onDragOver={handleDragOver}
//                             onDrop={handleDrop}
//                             onClick={handleUploadClick}
//                         >
//                             <input
                            
//                                 webkitdirectory=""
//                                 mozdirectory=""
//                                 type="file"
//                                 multiple
//                                 ref={fileInputRef}
//                                 style={{ display: 'none' }}
//                                 onChange={handleFileInputChange}
//                             />
//                             <span style={{ margin: 'auto', color: 'gray', fontSize: '16' }}>Drag & drop files here or click to upload</span>
//                         </div>
//                         <div className='upload-btns'>
//                             <span style={{ fontSize: 10, color: 'gray', }}>upload from*</span>
//                             <button className="upload-btn" onClick={() => alert('coming soon!')}>
//                                 <i className="bi bi-cloud-arrow-up-fill"></i> Google Drive
//                             </button>
//                             <button className="upload-btn" onClick={() => alert('coming soon!')}>
//                                 <i className="bi bi-dropbox"></i> Drop Box
//                             </button>
//                         </div>
//                     </div>
//                 </div>
//                 <div className="files-list">
//                     {files.map((file, index) => (
//                         <div key={index} className="file-item">
//                             <div className="file-details">
//                                 <p className="file-name">{file.name}</p>
//                                 <p className="upload-time">{file.uploadTime}</p>
//                             </div>
//                             <div className="file-actions">
//                                 <i className="bi bi-share" onClick={() => handleShareClick(index)}></i>
//                                 {modalFileIndex === index && (
//                                     <ShareModal show={showShareModal} handleClose={handleCloseShareModal} accessLink={accessLink} />
//                                 )}
//                                 <i className="bi bi-three-dots" onClick={() => handleOptionsClick(index)}></i>
//                             </div>
//                         </div>
//                     ))}
//                 </div>

//                 {/* Options Modal */}
//                 <Modal show={showOptionsModal} onHide={handleCloseOptionsModal}>
//                     <Modal.Header closeButton>
//                         <Modal.Title>File Options</Modal.Title>
//                     </Modal.Header>
//                     <Modal.Body>
//                         <Button variant="secondary" onClick={handleArchive}>Archive</Button>
//                         <Button variant="danger" className="ms-2" onClick={() => alert('Delete option coming soon!')}>Delete</Button>
//                         <Button variant="warning" className="ms-2" onClick={() => alert('Rename option coming soon!')}>Rename</Button>
//                     </Modal.Body>
//                 </Modal>
//             </div>
//         </div>
//     );
// }

// export default Fileupload;



code to read file content

    const handleFileClick = (file) => {
        const reader = new FileReader();
    
        reader.onload = () => {
            if (file.fileData.type === 'application/pdf') {
                const arrayBuffer = reader.result;
                pdfjsLib.getDocument(arrayBuffer).promise.then(pdf => {
                    pdf.getPage(1).then(page => {
                        page.getTextContent().then(textContent => {
                            // Display PDF text content
                            setSelectedFileContent(textContent.items.map(item => item.str).join(' '));
                        });
                    });
                }).catch(error => {
                    console.error('Error reading PDF file:', error);
                    setSelectedFileContent('Error reading file content.');
                });
            } else if (file.fileData.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                // Handle .docx files
                try {
                    const arrayBuffer = reader.result;
                    const result = mammoth.extractRawText({ arrayBuffer });
                    setSelectedFileContent(result.value);
                } catch (error) {
                    console.error('Error reading .docx file:', error);
                    setSelectedFileContent('Error reading file content.');
                }
            } else if (file.fileData.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
                    const arrayBuffer = reader.result;
                    const workbook = XLSX.read(arrayBuffer, { type: 'array' });
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    const data = XLSX.utils.sheet_to_html(worksheet);
                    setSelectedFileContent(data); // Display the sheet as HTML
            } else {
                // Handle other file types as text
                setSelectedFileContent(reader.result);
                reader.readAsArrayBuffer(file.fileData);
            }
            setShowFileModal(true);
        };
    
        reader.readAsArrayBuffer(file.fileData); // Read as ArrayBuffer for .docx
    };